import subprocess
import pandas as pd
from pathlib import Path
import shutil
from typing import Iterable

REPO_URL = "https://github.com/Institut-zdravotnych-analyz/OSN-Algoritmus-MS.git"
REPO_DIR = "OSN-Algoritmus-MS"


def run_algorithm(input_path: Path, flags: Iterable[str] = []) -> Path:
    """
    Run the algorithm with specified input file, and flags.

    Args:
        input_path: Path to the input file
        flags: flags to pass to the algorithm

    Returns:
        Path to the output file generated by the algorithm
    """

    cmd = ["python", "main.py", str(input_path), f"-{''.join(flags)}"]
    subprocess.run(cmd, cwd=REPO_DIR, check=True)
    output_path = input_path.with_stem(f"{input_path.stem}_output")

    return output_path


def compare_outputs(
    output_file_a: Path, output_file_b: Path, version_a: str, version_b: str
) -> pd.DataFrame:
    """
    Compare outputs from two different versions of the algorithm.

    Args:
        output_file_a: Path to the output file from version A
        output_file_b: Path to the output file from version B
        version_a: Identifier for version A
        version_b: Identifier for version B

    Returns:
        DataFrame containing only the rows where the outputs differ
    """
    df_a = pd.read_csv(output_file_a, sep=";")
    df_b = pd.read_csv(output_file_b, sep=";")

    merged_df = pd.merge(
        df_a.rename(columns={"ms": f"ms_{version_a}"}),
        df_b[["id", "ms"]].rename(columns={"ms": f"ms_{version_b}"}),
        on="id",
        how="inner",
    )

    diff_rows = merged_df[merged_df[f"ms_{version_a}"] != merged_df[f"ms_{version_b}"]]
    return diff_rows


def run_and_compare(
    commit_a: str, commit_b: str, input_path: str | Path, flags: Iterable[str]
) -> pd.DataFrame:
    """
    Run the algorithm with two different versions and compare their outputs.

    Args:
        commit_a: Commit of the first version to run
        commit_b: Commit of the second version to run
        input_file: Path to the input file
        flags: List of flags to pass to the algorithm

    Returns:
        DataFrame with algorithm outputs containing only the rows where the outputs 
        differ
    """
    input_path = Path(input_path).resolve()
    if not Path(REPO_DIR).exists():
        subprocess.run(["git", "clone", REPO_URL], check=True)
    else:
        subprocess.run(["git", "-C", REPO_DIR, "fetch", "origin"], check=True)

    subprocess.run(["git", "-C", REPO_DIR, "checkout", commit_a], check=True)
    versioned_input_path = input_path.with_stem(f"{input_path.stem}_{commit_a}")
    shutil.copy(input_path, versioned_input_path)
    output_a_path = run_algorithm(versioned_input_path, flags)

    subprocess.run(["git", "-C", REPO_DIR, "checkout", commit_b], check=True)
    versioned_input_path = input_path.with_stem(f"{input_path.stem}_{commit_b}")
    shutil.copy(input_path, versioned_input_path)
    output_b_path = run_algorithm(versioned_input_path, flags)

    differences = compare_outputs(output_a_path, output_b_path, commit_a, commit_b)
    return differences
